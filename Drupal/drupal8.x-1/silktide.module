<?php

/**
 * @file
 * Main Silktide file hooks.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\silktide\Event\SilktideEvent;
use Drupal\node\Entity\Node;

/**
 * Adds the help page.
 *
 * @inheritDoc
 */
function silktide_help($route_name, RouteMatchInterface $route_match) {
  if ('help.page.silktide' === $route_name) {
    return sprintf(
        t(
        '<h2>Configuration instructions</h2><p>Please see the <a href="%s">configuration guide</a> or contact <a href="%s">Silktide</a> for assistance.</p>'
        ),
          'https://support.silktide.com/guides/cms-install-drupal-guide/',
          'https://www.silktide.com'
        );
  }

}

/**
 * Listen to inserted entities.
 *
 * @inheritDoc
 */
function silktide_entity_insert(EntityInterface $entity) {
  if (!$entity instanceof Node) {
    return;
  }

  if (!$entity->isPublished()) {
    return;
  }

  $dispatcher = Drupal::service('event_dispatcher');

  $dispatcher->dispatch(SilktideEvent::EVENT_NAME,
    new SilktideEvent(
      $entity->toUrl('canonical', ['absolute' => TRUE])->toString()
    )
  );

}

/**
 * Listen to changes to entities..
 *
 * @inheritDoc
 */
function silktide_entity_update(EntityInterface $entity) {
  if (!$entity instanceof Node) {
    return;
  }
  if (!$entity->isPublished()) {
    return;
  }
  $dispatcher = Drupal::service('event_dispatcher');

  $dispatcher->dispatch(SilktideEvent::EVENT_NAME,
    new SilktideEvent(
      $entity->toUrl('canonical', ['absolute' => TRUE])->toString()
    )
  );

}

/**
 * Alter attachments (typically assets) to a page before it is rendered.
 *
 * Use this hook when you want to remove or alter attachments on the page, or
 * add attachments to the page that depend on another module's attachments (this
 * hook runs after hook_page_attachments().
 *
 * If you try to add anything but #attached and #cache to the array, an
 * exception is thrown.
 *
 * @param array &$attachments
 *   Array of all attachments provided by hook_page_attachments()
 *   implementations.
 *
 * @see hook_page_attachments()
 */
function silktide_page_attachments(array &$attachments) {
  $apiKey = \Drupal::config('silktide.settings')->get('apikey');
  if (32 !== strlen($apiKey)) {
    return;
  }

  try {
    $node = \Drupal::routeMatch()->getParameter('node');

    if ($node instanceof Node) {

      $ivlen = openssl_cipher_iv_length('AES-256-CBC');
      // We don't check the cryptographically strong flag
      // as it's not vitally important in this usage.
      $iv = openssl_random_pseudo_bytes($ivlen);
      if (FALSE === $iv) {
        return;
      }

      $ciphertext_raw = openssl_encrypt(
        json_encode(
          [
            'editorUrl' =>
            $node->toUrl('edit-form', ['absolute' => TRUE])->toString(),
          ]
        ),
        'AES-256-CBC',
        $apiKey,
        OPENSSL_RAW_DATA,
        $iv);

      $hmac = hash_hmac('sha256', $ciphertext_raw, $apiKey, TRUE);

      $ciphertext = base64_encode($iv . $hmac . $ciphertext_raw);
      $data = [
        '#tag' => 'meta',
        '#type' => 'html_tag',
        '#attributes' => [
          'name' => 'silktide-cms',
          'content' => $ciphertext,
        ],
      ];
      $attachments['#attached']['html_head'][] = [$data, 'silktide'];
    }

  }
  catch (\Exception $e) {

    \Drupal::logger(
      'silktide')->error(
        'Unable to run Silktide: ' . $e->getMessage(
        )
    );
  }

}
